// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package protos;

option go_package = "golang.org/x/build/internal/relui/protos";

// ReleaseService enables the signing of release artifacts.
service ReleaseService {
  // UpdateSigningStatus is a bidirectional connection where server is requesting that the client:
  // - Sign a release artifact.
  // - Provide an update on a previous request to sign a release artifact.
  // The client initiates a connection with the server and waits for the server to issue a request
  // such as:
  // - An update on the status of a signing request (either running or completed).
  // - An acknowledgement that a request to sign a release artifact has been accepted and initiated.
  rpc UpdateSigningStatus (stream SigningStatus) returns (stream SigningRequest) {}
}

// Request for an update on an existing signing request.
message SignArtifactStatusRequest {}

// Request to sign a release artifact.
message SignArtifactRequest {
  enum BuildType {
    BUILD_TYPE_UNSPECIFIED = 0;
    BUILD_TYPE_MACOSAMD = 1;
    BUILD_TYPE_MACOSARM = 2;
    BUILD_TYPE_WINDOWS = 3;
    BUILD_TYPE_GPG = 4;
  }
  // The type of artifact signing request.
  BuildType build_type = 1;
  // The GCS URI for the artifact that should be signed.
  // This artifact must reside in the agreed upon private
  // GCS bucket.
  string gcs_uri = 2;
}

// Request an action from the signing client.
message SigningRequest {
  // unique identifier for the signing job.
  string id = 1;
  // Request type for the signing client.
  oneof request_oneof {
    SignArtifactStatusRequest status = 2;
    SignArtifactRequest sign = 3;
  }
}

// The signing status for a signing request which does not exist.
message StatusNotFound {}

// The signing status for an in progress signing request.
message StatusRunning {
  // Details about the signing request status.
  string description = 1;
}

// The signing status for a failed signing request.
message StatusFailed {
  // Details about the signing request status.
  string description = 1;
}

// The signing status for a successfully completed signing request.
message StatusCompleted {
  // The GCS URI of the signed artifact.
  string gcs_uri = 1;
}

// The status of the signing request.
message SigningStatus {
  // unique identifier for the signing job.
  string id = 1;
  // The status type of the signing request.
  oneof status_oneof {
    StatusNotFound not_found = 2;
    StatusRunning running = 3;
    StatusFailed failed = 4;
    StatusCompleted completed = 5;
  }
}
