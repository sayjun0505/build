// Code generated by protoc-gen-go.
// source: maintner.proto
// DO NOT EDIT!

/*
Package maintpb is a generated protocol buffer package.

It is generated from these files:
	maintner.proto

It has these top-level messages:
	Mutation
	GithubIssueMutation
	GithubIssueCommentMutation
	GithubUser
*/
package maintpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Mutation struct {
	GithubIssue *GithubIssueMutation `protobuf:"bytes,1,opt,name=github_issue,json=githubIssue" json:"github_issue,omitempty"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Mutation) GetGithubIssue() *GithubIssueMutation {
	if m != nil {
		return m.GithubIssue
	}
	return nil
}

type GithubIssueMutation struct {
	Owner   string                        `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Repo    string                        `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Number  int32                         `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	User    *GithubUser                   `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Created *google_protobuf.Timestamp    `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	Updated *google_protobuf.Timestamp    `protobuf:"bytes,6,opt,name=updated" json:"updated,omitempty"`
	Body    string                        `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	Comment []*GithubIssueCommentMutation `protobuf:"bytes,8,rep,name=comment" json:"comment,omitempty"`
}

func (m *GithubIssueMutation) Reset()                    { *m = GithubIssueMutation{} }
func (m *GithubIssueMutation) String() string            { return proto.CompactTextString(m) }
func (*GithubIssueMutation) ProtoMessage()               {}
func (*GithubIssueMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GithubIssueMutation) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GithubIssueMutation) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GithubIssueMutation) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GithubIssueMutation) GetUser() *GithubUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GithubIssueMutation) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GithubIssueMutation) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *GithubIssueMutation) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *GithubIssueMutation) GetComment() []*GithubIssueCommentMutation {
	if m != nil {
		return m.Comment
	}
	return nil
}

type GithubIssueCommentMutation struct {
	Id      int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	User    *GithubUser                `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Body    string                     `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Created *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	Updated *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=updated" json:"updated,omitempty"`
}

func (m *GithubIssueCommentMutation) Reset()                    { *m = GithubIssueCommentMutation{} }
func (m *GithubIssueCommentMutation) String() string            { return proto.CompactTextString(m) }
func (*GithubIssueCommentMutation) ProtoMessage()               {}
func (*GithubIssueCommentMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GithubIssueCommentMutation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubIssueCommentMutation) GetUser() *GithubUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GithubIssueCommentMutation) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *GithubIssueCommentMutation) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GithubIssueCommentMutation) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

type GithubUser struct {
	Id    int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Login string `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
}

func (m *GithubUser) Reset()                    { *m = GithubUser{} }
func (m *GithubUser) String() string            { return proto.CompactTextString(m) }
func (*GithubUser) ProtoMessage()               {}
func (*GithubUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GithubUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubUser) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func init() {
	proto.RegisterType((*Mutation)(nil), "maintpb.Mutation")
	proto.RegisterType((*GithubIssueMutation)(nil), "maintpb.GithubIssueMutation")
	proto.RegisterType((*GithubIssueCommentMutation)(nil), "maintpb.GithubIssueCommentMutation")
	proto.RegisterType((*GithubUser)(nil), "maintpb.GithubUser")
}

func init() { proto.RegisterFile("maintner.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0xc9, 0xbf, 0xa6, 0xf7, 0xf4, 0xd2, 0xc5, 0xb4, 0x5c, 0x42, 0xb9, 0x8b, 0x12, 0x17,
	0x76, 0x35, 0x81, 0xea, 0x4e, 0xc4, 0x85, 0x0b, 0x11, 0x71, 0x13, 0x74, 0x2d, 0x49, 0x33, 0x8e,
	0x03, 0x9d, 0x3f, 0x4c, 0x66, 0x90, 0x3e, 0x9d, 0x4f, 0xe1, 0xfb, 0x48, 0x26, 0x49, 0x5b, 0xb4,
	0x52, 0x71, 0x77, 0xce, 0x9c, 0xef, 0x3b, 0xf9, 0xce, 0x8f, 0xc0, 0x98, 0x17, 0x4c, 0x18, 0x41,
	0x34, 0x56, 0x5a, 0x1a, 0x89, 0x62, 0xd7, 0xab, 0x72, 0x76, 0x41, 0x99, 0x79, 0xb1, 0x25, 0x5e,
	0x49, 0x9e, 0x51, 0xb9, 0x2e, 0x04, 0xcd, 0x9c, 0xa2, 0xb4, 0xcf, 0x99, 0x32, 0x1b, 0x45, 0xea,
	0xcc, 0x30, 0x4e, 0x6a, 0x53, 0x70, 0xb5, 0xab, 0xda, 0x2d, 0xe9, 0x1d, 0x0c, 0xef, 0xad, 0x29,
	0x0c, 0x93, 0x02, 0x5d, 0xc1, 0xdf, 0x76, 0xd5, 0x13, 0xab, 0x6b, 0x4b, 0x12, 0x6f, 0xee, 0x2d,
	0x46, 0xcb, 0xff, 0xb8, 0xfb, 0x10, 0xbe, 0x71, 0xc3, 0xdb, 0x66, 0xd6, 0x7b, 0xf2, 0x11, 0xdd,
	0x3d, 0xa6, 0x6f, 0x3e, 0x4c, 0x0e, 0x88, 0xd0, 0x14, 0x22, 0xf9, 0x2a, 0x88, 0x76, 0x1b, 0xff,
	0xe4, 0x6d, 0x83, 0x10, 0x84, 0x9a, 0x28, 0x99, 0xf8, 0xee, 0xd1, 0xd5, 0xe8, 0x1f, 0x0c, 0x84,
	0xe5, 0x25, 0xd1, 0x49, 0x30, 0xf7, 0x16, 0x51, 0xde, 0x75, 0xe8, 0x14, 0x42, 0x5b, 0x13, 0x9d,
	0x84, 0x2e, 0xd2, 0xe4, 0x53, 0xa4, 0xc7, 0x9a, 0xe8, 0xdc, 0x09, 0xd0, 0x39, 0xc4, 0x2b, 0x4d,
	0x0a, 0x43, 0xaa, 0x24, 0x72, 0xda, 0x19, 0xa6, 0x52, 0xd2, 0x35, 0xc1, 0x3d, 0x13, 0xfc, 0xd0,
	0x23, 0xc8, 0x7b, 0x69, 0xe3, 0xb2, 0xaa, 0x72, 0xae, 0xc1, 0x71, 0x57, 0x27, 0x6d, 0x0e, 0x28,
	0x65, 0xb5, 0x49, 0xe2, 0xf6, 0x80, 0xa6, 0x46, 0x97, 0x10, 0xaf, 0x24, 0xe7, 0x44, 0x98, 0x64,
	0x38, 0x0f, 0x16, 0xa3, 0xe5, 0xc9, 0x21, 0x7c, 0xd7, 0xad, 0x64, 0x4b, 0xb1, 0xf7, 0xa4, 0xef,
	0x1e, 0xcc, 0xbe, 0xd7, 0xa1, 0x31, 0xf8, 0xac, 0x72, 0x14, 0x83, 0xdc, 0x67, 0xd5, 0x16, 0x8b,
	0x7f, 0x0c, 0x4b, 0x1f, 0x35, 0xd8, 0x8b, 0xba, 0x87, 0x2a, 0xfc, 0x15, 0xaa, 0xe8, 0xc7, 0xa8,
	0xd2, 0x25, 0xc0, 0x2e, 0xd3, 0x97, 0x33, 0xa6, 0x10, 0xad, 0x25, 0x65, 0xa2, 0xfb, 0x15, 0xda,
	0xa6, 0x1c, 0xb8, 0x85, 0x67, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0x22, 0x93, 0x16, 0xf9,
	0x02, 0x00, 0x00,
}
