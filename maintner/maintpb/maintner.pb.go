// Code generated by protoc-gen-go.
// source: maintner.proto
// DO NOT EDIT!

/*
Package maintpb is a generated protocol buffer package.

It is generated from these files:
	maintner.proto

It has these top-level messages:
	Mutation
	GithubIssueMutation
	GithubIssueCommentMutation
	GithubUser
	Timestamp
*/
package maintpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Mutation struct {
	GithubIssue *GithubIssueMutation `protobuf:"bytes,1,opt,name=github_issue,json=githubIssue" json:"github_issue,omitempty"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Mutation) GetGithubIssue() *GithubIssueMutation {
	if m != nil {
		return m.GithubIssue
	}
	return nil
}

type GithubIssueMutation struct {
	Owner   string                        `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Repo    string                        `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Number  int32                         `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	User    *GithubUser                   `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Created *Timestamp                    `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	Updated *Timestamp                    `protobuf:"bytes,6,opt,name=updated" json:"updated,omitempty"`
	Body    string                        `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	Comment []*GithubIssueCommentMutation `protobuf:"bytes,8,rep,name=comment" json:"comment,omitempty"`
}

func (m *GithubIssueMutation) Reset()                    { *m = GithubIssueMutation{} }
func (m *GithubIssueMutation) String() string            { return proto.CompactTextString(m) }
func (*GithubIssueMutation) ProtoMessage()               {}
func (*GithubIssueMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GithubIssueMutation) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GithubIssueMutation) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GithubIssueMutation) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GithubIssueMutation) GetUser() *GithubUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GithubIssueMutation) GetCreated() *Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GithubIssueMutation) GetUpdated() *Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *GithubIssueMutation) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *GithubIssueMutation) GetComment() []*GithubIssueCommentMutation {
	if m != nil {
		return m.Comment
	}
	return nil
}

type GithubIssueCommentMutation struct {
	Id      int64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	User    *GithubUser `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Body    string      `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Created *Timestamp  `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	Updated *Timestamp  `protobuf:"bytes,5,opt,name=updated" json:"updated,omitempty"`
}

func (m *GithubIssueCommentMutation) Reset()                    { *m = GithubIssueCommentMutation{} }
func (m *GithubIssueCommentMutation) String() string            { return proto.CompactTextString(m) }
func (*GithubIssueCommentMutation) ProtoMessage()               {}
func (*GithubIssueCommentMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GithubIssueCommentMutation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubIssueCommentMutation) GetUser() *GithubUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GithubIssueCommentMutation) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *GithubIssueCommentMutation) GetCreated() *Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GithubIssueCommentMutation) GetUpdated() *Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

type GithubUser struct {
	Id    int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Login string `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
}

func (m *GithubUser) Reset()                    { *m = GithubUser{} }
func (m *GithubUser) String() string            { return proto.CompactTextString(m) }
func (*GithubUser) ProtoMessage()               {}
func (*GithubUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GithubUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubUser) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

// Timestamp is a copy of the protobuf well-known Timestamp.
// TODO: use the official one, after figuring out the protoc command line
// chicanery.
type Timestamp struct {
	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func init() {
	proto.RegisterType((*Mutation)(nil), "maintpb.Mutation")
	proto.RegisterType((*GithubIssueMutation)(nil), "maintpb.GithubIssueMutation")
	proto.RegisterType((*GithubIssueCommentMutation)(nil), "maintpb.GithubIssueCommentMutation")
	proto.RegisterType((*GithubUser)(nil), "maintpb.GithubUser")
	proto.RegisterType((*Timestamp)(nil), "maintpb.Timestamp")
}

func init() { proto.RegisterFile("maintner.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x4a, 0xfb, 0x40,
	0x14, 0xc5, 0xc9, 0x57, 0xd3, 0xde, 0xfe, 0xe9, 0x62, 0x5a, 0xfe, 0x0c, 0xe2, 0xa2, 0xc4, 0x85,
	0x5d, 0x48, 0x17, 0x75, 0x29, 0xe2, 0xc2, 0x85, 0x88, 0xb8, 0x19, 0x74, 0x2d, 0x49, 0x73, 0xa9,
	0x03, 0x66, 0x26, 0xcc, 0x4c, 0x10, 0x9f, 0xca, 0xa7, 0xf0, 0xbd, 0x24, 0x37, 0x1f, 0x2d, 0xda,
	0x52, 0xdc, 0xcd, 0xb9, 0xf7, 0x77, 0x2e, 0x87, 0x93, 0xc0, 0xa4, 0x48, 0xa5, 0x72, 0x0a, 0xcd,
	0xb2, 0x34, 0xda, 0x69, 0x16, 0x93, 0x2e, 0xb3, 0xe4, 0x01, 0x86, 0x8f, 0x95, 0x4b, 0x9d, 0xd4,
	0x8a, 0xdd, 0xc0, 0xbf, 0x8d, 0x74, 0xaf, 0x55, 0xf6, 0x22, 0xad, 0xad, 0x90, 0x7b, 0x73, 0x6f,
	0x31, 0x5e, 0x9d, 0x2e, 0x5b, 0x76, 0x79, 0x47, 0xcb, 0xfb, 0x7a, 0xd7, 0x79, 0xc4, 0x78, 0xb3,
	0x1d, 0x26, 0x9f, 0x3e, 0x4c, 0xf7, 0x40, 0x6c, 0x06, 0x91, 0x7e, 0x57, 0x68, 0xe8, 0xe2, 0x48,
	0x34, 0x82, 0x31, 0x08, 0x0d, 0x96, 0x9a, 0xfb, 0x34, 0xa4, 0x37, 0xfb, 0x0f, 0x03, 0x55, 0x15,
	0x19, 0x1a, 0x1e, 0xcc, 0xbd, 0x45, 0x24, 0x5a, 0xc5, 0xce, 0x21, 0xac, 0x2c, 0x1a, 0x1e, 0x52,
	0xa4, 0xe9, 0x8f, 0x48, 0xcf, 0x16, 0x8d, 0x20, 0x80, 0x5d, 0x40, 0xbc, 0x36, 0x98, 0x3a, 0xcc,
	0x79, 0x44, 0x2c, 0xeb, 0xd9, 0x27, 0x59, 0xa0, 0x75, 0x69, 0x51, 0x8a, 0x0e, 0xa9, 0xe9, 0xaa,
	0xcc, 0x89, 0x1e, 0x1c, 0xa6, 0x5b, 0xa4, 0x0e, 0x9c, 0xe9, 0xfc, 0x83, 0xc7, 0x4d, 0xe0, 0xfa,
	0xcd, 0xae, 0x21, 0x5e, 0xeb, 0xa2, 0x40, 0xe5, 0xf8, 0x70, 0x1e, 0x2c, 0xc6, 0xab, 0xb3, 0x7d,
	0x75, 0xdd, 0x36, 0x48, 0xdf, 0x5a, 0xe7, 0x49, 0xbe, 0x3c, 0x38, 0x39, 0xcc, 0xb1, 0x09, 0xf8,
	0x32, 0xa7, 0xd6, 0x02, 0xe1, 0xcb, 0xbc, 0xaf, 0xc1, 0x3f, 0x56, 0x43, 0x17, 0x35, 0xd8, 0x89,
	0xba, 0x53, 0x4d, 0xf8, 0xa7, 0x6a, 0xa2, 0xa3, 0xd5, 0x24, 0x2b, 0x80, 0x6d, 0x86, 0x5f, 0xb1,
	0x67, 0x10, 0xbd, 0xe9, 0x8d, 0x54, 0xed, 0xa7, 0x6e, 0x44, 0x72, 0x05, 0xa3, 0xfe, 0x12, 0xe3,
	0x10, 0x5b, 0x5c, 0x6b, 0x95, 0xdb, 0xd6, 0xd7, 0xc9, 0xda, 0xac, 0x52, 0xa5, 0x2d, 0x99, 0x23,
	0xd1, 0x88, 0x6c, 0x40, 0xff, 0xf1, 0xe5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xfd, 0x62,
	0x8b, 0xd9, 0x02, 0x00, 0x00,
}
