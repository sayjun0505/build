// Code generated by protoc-gen-go.
// source: maintner.proto
// DO NOT EDIT!

/*
Package maintpb is a generated protocol buffer package.

It is generated from these files:
	maintner.proto

It has these top-level messages:
	Mutation
	GithubIssueMutation
	BoolChange
	GithubLabel
	GithubIssueCommentSyncStatus
	GithubIssueCommentMutation
	GithubUser
	GitMutation
	GitRepo
	GitCommit
	GitDiffTree
	GitDiffTreeFile
*/
package maintpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Mutation struct {
	GithubIssue *GithubIssueMutation `protobuf:"bytes,1,opt,name=github_issue,json=githubIssue" json:"github_issue,omitempty"`
	Git         *GitMutation         `protobuf:"bytes,2,opt,name=git" json:"git,omitempty"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Mutation) GetGithubIssue() *GithubIssueMutation {
	if m != nil {
		return m.GithubIssue
	}
	return nil
}

func (m *Mutation) GetGit() *GitMutation {
	if m != nil {
		return m.Git
	}
	return nil
}

type GithubIssueMutation struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Repo   string `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Number int32  `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	// not_exist is set true if the issue has been found to not exist.
	// If true, the owner/repo/number fields above must still be set.
	// If a future issue mutation for the same number arrives without
	// not_exist set, then the issue comes back to life.
	NotExist         bool                       `protobuf:"varint,13,opt,name=not_exist,json=notExist" json:"not_exist,omitempty"`
	Id               int64                      `protobuf:"varint,12,opt,name=id" json:"id,omitempty"`
	User             *GithubUser                `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Assignees        []*GithubUser              `protobuf:"bytes,10,rep,name=assignees" json:"assignees,omitempty"`
	DeletedAssignees []int64                    `protobuf:"varint,11,rep,packed,name=deleted_assignees,json=deletedAssignees" json:"deleted_assignees,omitempty"`
	Created          *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	Updated          *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=updated" json:"updated,omitempty"`
	Body             string                     `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	Title            string                     `protobuf:"bytes,9,opt,name=title" json:"title,omitempty"`
	NoMilestone      bool                       `protobuf:"varint,15,opt,name=no_milestone,json=noMilestone" json:"no_milestone,omitempty"`
	// When setting a milestone, the following are all each set if known:
	MilestoneId    int64                         `protobuf:"varint,16,opt,name=milestone_id,json=milestoneId" json:"milestone_id,omitempty"`
	MilestoneNum   int64                         `protobuf:"varint,17,opt,name=milestone_num,json=milestoneNum" json:"milestone_num,omitempty"`
	MilestoneTitle string                        `protobuf:"bytes,18,opt,name=milestone_title,json=milestoneTitle" json:"milestone_title,omitempty"`
	Closed         *BoolChange                   `protobuf:"bytes,19,opt,name=closed" json:"closed,omitempty"`
	Locked         *BoolChange                   `protobuf:"bytes,25,opt,name=locked" json:"locked,omitempty"`
	ClosedAt       *google_protobuf.Timestamp    `protobuf:"bytes,21,opt,name=closed_at,json=closedAt" json:"closed_at,omitempty"`
	ClosedBy       *GithubUser                   `protobuf:"bytes,22,opt,name=closed_by,json=closedBy" json:"closed_by,omitempty"`
	RemoveLabel    []int64                       `protobuf:"varint,23,rep,packed,name=remove_label,json=removeLabel" json:"remove_label,omitempty"`
	AddLabel       []*GithubLabel                `protobuf:"bytes,24,rep,name=add_label,json=addLabel" json:"add_label,omitempty"`
	Comment        []*GithubIssueCommentMutation `protobuf:"bytes,8,rep,name=comment" json:"comment,omitempty"`
	CommentStatus  *GithubIssueCommentSyncStatus `protobuf:"bytes,14,opt,name=comment_status,json=commentStatus" json:"comment_status,omitempty"`
}

func (m *GithubIssueMutation) Reset()                    { *m = GithubIssueMutation{} }
func (m *GithubIssueMutation) String() string            { return proto.CompactTextString(m) }
func (*GithubIssueMutation) ProtoMessage()               {}
func (*GithubIssueMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GithubIssueMutation) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GithubIssueMutation) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GithubIssueMutation) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GithubIssueMutation) GetNotExist() bool {
	if m != nil {
		return m.NotExist
	}
	return false
}

func (m *GithubIssueMutation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubIssueMutation) GetUser() *GithubUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GithubIssueMutation) GetAssignees() []*GithubUser {
	if m != nil {
		return m.Assignees
	}
	return nil
}

func (m *GithubIssueMutation) GetDeletedAssignees() []int64 {
	if m != nil {
		return m.DeletedAssignees
	}
	return nil
}

func (m *GithubIssueMutation) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GithubIssueMutation) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *GithubIssueMutation) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *GithubIssueMutation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GithubIssueMutation) GetNoMilestone() bool {
	if m != nil {
		return m.NoMilestone
	}
	return false
}

func (m *GithubIssueMutation) GetMilestoneId() int64 {
	if m != nil {
		return m.MilestoneId
	}
	return 0
}

func (m *GithubIssueMutation) GetMilestoneNum() int64 {
	if m != nil {
		return m.MilestoneNum
	}
	return 0
}

func (m *GithubIssueMutation) GetMilestoneTitle() string {
	if m != nil {
		return m.MilestoneTitle
	}
	return ""
}

func (m *GithubIssueMutation) GetClosed() *BoolChange {
	if m != nil {
		return m.Closed
	}
	return nil
}

func (m *GithubIssueMutation) GetLocked() *BoolChange {
	if m != nil {
		return m.Locked
	}
	return nil
}

func (m *GithubIssueMutation) GetClosedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.ClosedAt
	}
	return nil
}

func (m *GithubIssueMutation) GetClosedBy() *GithubUser {
	if m != nil {
		return m.ClosedBy
	}
	return nil
}

func (m *GithubIssueMutation) GetRemoveLabel() []int64 {
	if m != nil {
		return m.RemoveLabel
	}
	return nil
}

func (m *GithubIssueMutation) GetAddLabel() []*GithubLabel {
	if m != nil {
		return m.AddLabel
	}
	return nil
}

func (m *GithubIssueMutation) GetComment() []*GithubIssueCommentMutation {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *GithubIssueMutation) GetCommentStatus() *GithubIssueCommentSyncStatus {
	if m != nil {
		return m.CommentStatus
	}
	return nil
}

// BoolChange represents a change to a boolean value.
type BoolChange struct {
	Val bool `protobuf:"varint,1,opt,name=val" json:"val,omitempty"`
}

func (m *BoolChange) Reset()                    { *m = BoolChange{} }
func (m *BoolChange) String() string            { return proto.CompactTextString(m) }
func (*BoolChange) ProtoMessage()               {}
func (*BoolChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BoolChange) GetVal() bool {
	if m != nil {
		return m.Val
	}
	return false
}

type GithubLabel struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GithubLabel) Reset()                    { *m = GithubLabel{} }
func (m *GithubLabel) String() string            { return proto.CompactTextString(m) }
func (*GithubLabel) ProtoMessage()               {}
func (*GithubLabel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GithubLabel) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubLabel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// GithubIssueCommentSyncStatus notes where syncing is at for comments
// on an issue,
// This mutation type is only made at/after the same top-level mutation
// which created the corresponding comments.
type GithubIssueCommentSyncStatus struct {
	// server_date is the "Date" response header from Github for the
	// final HTTP response.
	ServerDate *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=server_date,json=serverDate" json:"server_date,omitempty"`
}

func (m *GithubIssueCommentSyncStatus) Reset()                    { *m = GithubIssueCommentSyncStatus{} }
func (m *GithubIssueCommentSyncStatus) String() string            { return proto.CompactTextString(m) }
func (*GithubIssueCommentSyncStatus) ProtoMessage()               {}
func (*GithubIssueCommentSyncStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GithubIssueCommentSyncStatus) GetServerDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.ServerDate
	}
	return nil
}

type GithubIssueCommentMutation struct {
	Id      int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	User    *GithubUser                `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Body    string                     `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Created *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	Updated *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=updated" json:"updated,omitempty"`
}

func (m *GithubIssueCommentMutation) Reset()                    { *m = GithubIssueCommentMutation{} }
func (m *GithubIssueCommentMutation) String() string            { return proto.CompactTextString(m) }
func (*GithubIssueCommentMutation) ProtoMessage()               {}
func (*GithubIssueCommentMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GithubIssueCommentMutation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubIssueCommentMutation) GetUser() *GithubUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GithubIssueCommentMutation) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *GithubIssueCommentMutation) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GithubIssueCommentMutation) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

type GithubUser struct {
	Id    int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Login string `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
}

func (m *GithubUser) Reset()                    { *m = GithubUser{} }
func (m *GithubUser) String() string            { return proto.CompactTextString(m) }
func (*GithubUser) ProtoMessage()               {}
func (*GithubUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GithubUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubUser) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

type GitMutation struct {
	Repo *GitRepo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	// commit adds a commit, or adds new information to a commit if fields
	// are added in the future.
	Commit *GitCommit `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
}

func (m *GitMutation) Reset()                    { *m = GitMutation{} }
func (m *GitMutation) String() string            { return proto.CompactTextString(m) }
func (*GitMutation) ProtoMessage()               {}
func (*GitMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GitMutation) GetRepo() *GitRepo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *GitMutation) GetCommit() *GitCommit {
	if m != nil {
		return m.Commit
	}
	return nil
}

// GitRepo identifies a git repo being mutated.
type GitRepo struct {
	// If go_repo is set, it identifies a go.googlesource.com/<go_repo> repo.
	GoRepo string `protobuf:"bytes,1,opt,name=go_repo,json=goRepo" json:"go_repo,omitempty"`
}

func (m *GitRepo) Reset()                    { *m = GitRepo{} }
func (m *GitRepo) String() string            { return proto.CompactTextString(m) }
func (*GitRepo) ProtoMessage()               {}
func (*GitRepo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GitRepo) GetGoRepo() string {
	if m != nil {
		return m.GoRepo
	}
	return ""
}

type GitCommit struct {
	Sha1 string `protobuf:"bytes,1,opt,name=sha1" json:"sha1,omitempty"`
	// raw is the "git cat-file commit $sha1" output.
	Raw      []byte       `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
	DiffTree *GitDiffTree `protobuf:"bytes,3,opt,name=diff_tree,json=diffTree" json:"diff_tree,omitempty"`
}

func (m *GitCommit) Reset()                    { *m = GitCommit{} }
func (m *GitCommit) String() string            { return proto.CompactTextString(m) }
func (*GitCommit) ProtoMessage()               {}
func (*GitCommit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GitCommit) GetSha1() string {
	if m != nil {
		return m.Sha1
	}
	return ""
}

func (m *GitCommit) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *GitCommit) GetDiffTree() *GitDiffTree {
	if m != nil {
		return m.DiffTree
	}
	return nil
}

// git diff-tree --numstat oldtree newtree
type GitDiffTree struct {
	File []*GitDiffTreeFile `protobuf:"bytes,1,rep,name=file" json:"file,omitempty"`
}

func (m *GitDiffTree) Reset()                    { *m = GitDiffTree{} }
func (m *GitDiffTree) String() string            { return proto.CompactTextString(m) }
func (*GitDiffTree) ProtoMessage()               {}
func (*GitDiffTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GitDiffTree) GetFile() []*GitDiffTreeFile {
	if m != nil {
		return m.File
	}
	return nil
}

// GitDiffTreeFile represents one line of `git diff-tree --numstat` output.
type GitDiffTreeFile struct {
	File    string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Added   int64  `protobuf:"varint,2,opt,name=added" json:"added,omitempty"`
	Deleted int64  `protobuf:"varint,3,opt,name=deleted" json:"deleted,omitempty"`
	Binary  bool   `protobuf:"varint,4,opt,name=binary" json:"binary,omitempty"`
}

func (m *GitDiffTreeFile) Reset()                    { *m = GitDiffTreeFile{} }
func (m *GitDiffTreeFile) String() string            { return proto.CompactTextString(m) }
func (*GitDiffTreeFile) ProtoMessage()               {}
func (*GitDiffTreeFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GitDiffTreeFile) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *GitDiffTreeFile) GetAdded() int64 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *GitDiffTreeFile) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *GitDiffTreeFile) GetBinary() bool {
	if m != nil {
		return m.Binary
	}
	return false
}

func init() {
	proto.RegisterType((*Mutation)(nil), "maintpb.Mutation")
	proto.RegisterType((*GithubIssueMutation)(nil), "maintpb.GithubIssueMutation")
	proto.RegisterType((*BoolChange)(nil), "maintpb.BoolChange")
	proto.RegisterType((*GithubLabel)(nil), "maintpb.GithubLabel")
	proto.RegisterType((*GithubIssueCommentSyncStatus)(nil), "maintpb.GithubIssueCommentSyncStatus")
	proto.RegisterType((*GithubIssueCommentMutation)(nil), "maintpb.GithubIssueCommentMutation")
	proto.RegisterType((*GithubUser)(nil), "maintpb.GithubUser")
	proto.RegisterType((*GitMutation)(nil), "maintpb.GitMutation")
	proto.RegisterType((*GitRepo)(nil), "maintpb.GitRepo")
	proto.RegisterType((*GitCommit)(nil), "maintpb.GitCommit")
	proto.RegisterType((*GitDiffTree)(nil), "maintpb.GitDiffTree")
	proto.RegisterType((*GitDiffTreeFile)(nil), "maintpb.GitDiffTreeFile")
}

func init() { proto.RegisterFile("maintner.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdf, 0x6f, 0xdc, 0x44,
	0x10, 0xd6, 0xc5, 0x97, 0xfb, 0x31, 0x97, 0x5c, 0xd2, 0x4d, 0x68, 0x97, 0x50, 0xa1, 0xc3, 0x05,
	0x7a, 0xa2, 0xe8, 0x42, 0x0a, 0x12, 0x0f, 0x11, 0x42, 0x6d, 0x0a, 0xa8, 0x52, 0xcb, 0xc3, 0x36,
	0x3c, 0xf1, 0x60, 0xf9, 0x6e, 0xe7, 0x9c, 0x15, 0xf6, 0xee, 0xc9, 0x5e, 0xa7, 0xdc, 0x1f, 0xca,
	0x33, 0xff, 0x0a, 0xda, 0xf1, 0xda, 0x3e, 0x5d, 0xf3, 0x03, 0xf5, 0x6d, 0x66, 0xe7, 0xfb, 0xc6,
	0x33, 0xdf, 0xce, 0xac, 0x61, 0x9c, 0xc5, 0x4a, 0x5b, 0x8d, 0xf9, 0x6c, 0x95, 0x1b, 0x6b, 0x58,
	0x9f, 0xfc, 0xd5, 0xfc, 0xe4, 0x3c, 0x51, 0xf6, 0xaa, 0x9c, 0xcf, 0x16, 0x26, 0x3b, 0x4d, 0x4c,
	0x1a, 0xeb, 0xe4, 0x94, 0x10, 0xf3, 0x72, 0x79, 0xba, 0xb2, 0xeb, 0x15, 0x16, 0xa7, 0x56, 0x65,
	0x58, 0xd8, 0x38, 0x5b, 0xb5, 0x56, 0x95, 0x25, 0x2c, 0x60, 0xf0, 0xb6, 0xb4, 0xb1, 0x55, 0x46,
	0xb3, 0x9f, 0x61, 0xaf, 0x4a, 0x15, 0xa9, 0xa2, 0x28, 0x91, 0x77, 0x26, 0x9d, 0xe9, 0xe8, 0xf9,
	0xe3, 0x99, 0xff, 0xd0, 0xec, 0x37, 0x0a, 0xbe, 0x76, 0xb1, 0x9a, 0x23, 0x46, 0x49, 0x7b, 0xc8,
	0xbe, 0x86, 0x20, 0x51, 0x96, 0xef, 0x10, 0xef, 0x78, 0x93, 0xd7, 0xe0, 0x1d, 0x20, 0xfc, 0xb7,
	0x0f, 0x47, 0x37, 0x24, 0x63, 0xc7, 0xb0, 0x6b, 0xde, 0x6b, 0xcc, 0xe9, 0xcb, 0x43, 0x51, 0x39,
	0x8c, 0x41, 0x37, 0xc7, 0x95, 0xa1, 0xb4, 0x43, 0x41, 0x36, 0x7b, 0x08, 0x3d, 0x5d, 0x66, 0x73,
	0xcc, 0x79, 0x30, 0xe9, 0x4c, 0x77, 0x85, 0xf7, 0xd8, 0x67, 0x30, 0xd4, 0xc6, 0x46, 0xf8, 0xb7,
	0x2a, 0x2c, 0xdf, 0x9f, 0x74, 0xa6, 0x03, 0x31, 0xd0, 0xc6, 0xfe, 0xe2, 0x7c, 0x36, 0x86, 0x1d,
	0x25, 0xf9, 0xde, 0xa4, 0x33, 0x0d, 0xc4, 0x8e, 0x92, 0xec, 0x29, 0x74, 0xcb, 0x02, 0x73, 0xde,
	0xa5, 0x7a, 0x8f, 0xb6, 0xfa, 0xfc, 0xa3, 0xc0, 0x5c, 0x10, 0x80, 0x9d, 0xc1, 0x30, 0x2e, 0x0a,
	0x95, 0x68, 0xc4, 0x82, 0xc3, 0x24, 0xb8, 0x0d, 0xdd, 0xa2, 0xd8, 0x33, 0x78, 0x20, 0x31, 0x45,
	0x8b, 0x32, 0x6a, 0xa9, 0xa3, 0x49, 0x30, 0x0d, 0xc4, 0xa1, 0x0f, 0xbc, 0x68, 0xc0, 0x3f, 0x40,
	0x7f, 0x91, 0x63, 0x6c, 0x51, 0xf2, 0x5d, 0xaa, 0xe5, 0x64, 0x96, 0x18, 0x93, 0xa4, 0x38, 0xab,
	0x2f, 0x72, 0x76, 0x59, 0xdf, 0x9b, 0xa8, 0xa1, 0x8e, 0x55, 0xae, 0x24, 0xb1, 0x7a, 0xf7, 0xb3,
	0x3c, 0xd4, 0xa9, 0x39, 0x37, 0x72, 0xcd, 0xfb, 0x95, 0x9a, 0xce, 0x76, 0xba, 0x5b, 0x65, 0x53,
	0xe4, 0xc3, 0x4a, 0x77, 0x72, 0xd8, 0x17, 0xb0, 0xa7, 0x4d, 0x94, 0xa9, 0x14, 0x0b, 0x6b, 0x34,
	0xf2, 0x03, 0x92, 0x73, 0xa4, 0xcd, 0xdb, 0xfa, 0xc8, 0x41, 0x9a, 0x78, 0xa4, 0x24, 0x3f, 0x24,
	0x6d, 0x47, 0xcd, 0xd9, 0x6b, 0xc9, 0x9e, 0xc0, 0x7e, 0x0b, 0xd1, 0x65, 0xc6, 0x1f, 0x10, 0xa6,
	0xe5, 0xfd, 0x5e, 0x66, 0xec, 0x29, 0x1c, 0xb4, 0xa0, 0xaa, 0x14, 0x46, 0xa5, 0x8c, 0x9b, 0xe3,
	0x4b, 0xaa, 0xe9, 0x19, 0xf4, 0x16, 0xa9, 0x29, 0x50, 0xf2, 0xa3, 0xad, 0x4b, 0x7b, 0x69, 0x4c,
	0x7a, 0x71, 0x15, 0xeb, 0x04, 0x85, 0x87, 0x38, 0x70, 0x6a, 0x16, 0x7f, 0xa1, 0xe4, 0x9f, 0xde,
	0x01, 0xae, 0x20, 0xec, 0x47, 0x18, 0x56, 0xb4, 0x28, 0xb6, 0xfc, 0x93, 0x7b, 0xf5, 0x1c, 0x54,
	0xe0, 0x17, 0x96, 0x7d, 0xd7, 0x10, 0xe7, 0x6b, 0xfe, 0xf0, 0xf6, 0x51, 0xf2, 0x8c, 0x97, 0x6b,
	0xa7, 0x5a, 0x8e, 0x99, 0xb9, 0xc6, 0x28, 0x8d, 0xe7, 0x98, 0xf2, 0x47, 0x34, 0x16, 0xa3, 0xea,
	0xec, 0x8d, 0x3b, 0xa2, 0x89, 0x93, 0xd2, 0xc7, 0x39, 0x4d, 0xdc, 0xf1, 0x56, 0x52, 0x02, 0x8a,
	0x41, 0x2c, 0x65, 0x45, 0xf9, 0x09, 0xfa, 0x0b, 0x93, 0x65, 0xa8, 0x2d, 0x1f, 0x10, 0xe1, 0xc9,
	0x4d, 0x8b, 0x7b, 0x51, 0x41, 0x9a, 0x7d, 0xac, 0x39, 0xec, 0x0d, 0x8c, 0xbd, 0x19, 0x15, 0x36,
	0xb6, 0x65, 0xc1, 0xc7, 0xd4, 0xcb, 0x57, 0x77, 0x64, 0x79, 0xb7, 0xd6, 0x8b, 0x77, 0x04, 0x16,
	0xfb, 0x9e, 0x5c, 0xb9, 0xe1, 0xe7, 0x00, 0xad, 0xc6, 0xec, 0x10, 0x82, 0xeb, 0x38, 0xa5, 0xad,
	0x1e, 0x08, 0x67, 0x86, 0x67, 0x30, 0xda, 0xe8, 0xc2, 0x6f, 0x66, 0xa7, 0xd9, 0x4c, 0x06, 0x5d,
	0x1d, 0x67, 0x58, 0xaf, 0xbc, 0xb3, 0xc3, 0x3f, 0xe1, 0xf1, 0x5d, 0x15, 0xb0, 0x73, 0x18, 0x15,
	0x98, 0x5f, 0x63, 0x1e, 0xb9, 0x41, 0xf7, 0x8f, 0xd7, 0x5d, 0x57, 0x08, 0x15, 0xfc, 0x55, 0x6c,
	0x31, 0xfc, 0xa7, 0x03, 0x27, 0xb7, 0xab, 0xf4, 0x41, 0x7d, 0xf5, 0xcb, 0xb1, 0x73, 0xdf, 0xcb,
	0x51, 0x6f, 0x5b, 0xb0, 0xb1, 0x6d, 0x1b, 0xdb, 0xde, 0xfd, 0xa8, 0x6d, 0xdf, 0xfd, 0xdf, 0xdb,
	0x1e, 0x3e, 0x07, 0x68, 0x6b, 0xfa, 0xa0, 0x8d, 0x63, 0xd8, 0x4d, 0x4d, 0xa2, 0xb4, 0xd7, 0xb9,
	0x72, 0xc2, 0x88, 0xee, 0xa6, 0xe9, 0xfd, 0x4b, 0xff, 0xfc, 0x56, 0x82, 0x1e, 0x6e, 0xf6, 0x2a,
	0x70, 0x65, 0xfc, 0x83, 0xfc, 0x0d, 0xf4, 0xdc, 0x04, 0x34, 0xaf, 0x3f, 0xdb, 0xc4, 0x5d, 0x50,
	0x44, 0x78, 0x44, 0x18, 0x42, 0xdf, 0x93, 0xd9, 0x23, 0xe8, 0x27, 0x26, 0x6a, 0xf2, 0x0f, 0x45,
	0x2f, 0x31, 0x2e, 0x10, 0x4a, 0x18, 0x36, 0x44, 0xa7, 0x62, 0x71, 0x15, 0x9f, 0x79, 0x08, 0xd9,
	0x6e, 0xa6, 0xf2, 0xf8, 0x3d, 0x7d, 0x6d, 0x4f, 0x38, 0xd3, 0xed, 0x8c, 0x54, 0xcb, 0x65, 0x64,
	0x73, 0x44, 0x12, 0x7c, 0x6b, 0x67, 0x5e, 0xa9, 0xe5, 0xf2, 0x32, 0x47, 0x14, 0x03, 0xe9, 0xad,
	0xf0, 0x9c, 0x5a, 0xad, 0x03, 0xec, 0x5b, 0xe8, 0x2e, 0x55, 0xea, 0x66, 0xc7, 0xed, 0x0f, 0xbf,
	0x89, 0xfc, 0xab, 0x4a, 0x51, 0x10, 0x2a, 0xcc, 0xe0, 0x60, 0x2b, 0xe0, 0x0a, 0xf5, 0x09, 0xa8,
	0x50, 0x67, 0x3b, 0x91, 0x63, 0x29, 0x51, 0x52, 0xa9, 0x81, 0xa8, 0x1c, 0xc6, 0xa1, 0xef, 0x7f,
	0x03, 0x54, 0x6a, 0x20, 0x6a, 0xd7, 0xfd, 0xda, 0xe6, 0x4a, 0xc7, 0xf9, 0x9a, 0xa6, 0x63, 0x20,
	0xbc, 0x37, 0xef, 0xd1, 0x3d, 0x7f, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xeb, 0xd9,
	0x90, 0x08, 0x08, 0x00, 0x00,
}
